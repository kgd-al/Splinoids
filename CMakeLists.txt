cmake_minimum_required(VERSION 3.4)

################################################################################
## General settings
################################################################################


project("Splinoids")

set(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic")#"-ftime-report")

set(CMAKE_CXX_STANDARD 17)

set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")


################################################################################
## Multi-configuration installation path
################################################################################

if (${CMAKE_INSTALL_PREFIX} MATCHES "^$ENV{HOME}")
    string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_TYPE)
    string(APPEND CMAKE_INSTALL_PREFIX "/${BUILD_TYPE}")
    set(CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})
endif()
message("> Install path is ${CMAKE_INSTALL_PREFIX}/")


################################################################################
## Managing uneven support of std 17 filesystem
################################################################################


if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  link_directories(/usr/local/opt/llvm/lib/)
endif()


################################################################################
## Dependencies
################################################################################

find_package(APOGeT REQUIRED)
include_directories(${APOGeT_INCLUDE_DIRS})
message("> APOGeT found at " ${APOGeT_DIR})
message("  > Core libraries " "${APOGeT_LIBRARIES}")
message("  > Gui libraries " "${APOGeT_GUI_LIBRARIES}")

################################################################################
## Source files (simulation)
################################################################################

FUNCTION(PREPEND output prefix)
   SET(listVar "")
   FOREACH(f ${ARGN})
      LIST(APPEND listVar "${prefix}/${f}")
   ENDFOREACH(f)
   SET(${output} "${listVar}" PARENT_SCOPE)
ENDFUNCTION(PREPEND)

set(GNTP_SRC
    "config.h"
    "critter.h"
    "critter.cpp"
    "environment.h"
    "environment.cpp"
#    "grammar.h"
#    "grammar.cpp"
#    "plant.h"
#    "config.h"
#    "plant.cpp"
)
PREPEND(GNTP_SRC "src/genotype" ${GNTP_SRC})

set(SIMU_SRC
    "critter.h"
    "critter.cpp"
    "foodlet.h"
    "foodlet.cpp"
    "environment.h"
    "environment.cpp"
    "simulation.h"
    "simulation.cpp"
    "config.h"
    "config.cpp"
    "time.h"
    "time.cpp"
    "ssga.h"
    "ssga.cpp"
#    "types.h"
#    "types.cpp"
#    "simulation.h"
#    "simulation.cpp"
#    "plant.h"
#    "plant.cpp"
#    "organ.h"
#    "organ.cpp"
#    "phylogenystats.hpp"
#    "physicstypes.hpp"
#    "tiniestphysicsengine.h"
#    "tiniestphysicsengine.cpp"
)
PREPEND(SIMU_SRC "src/simu" ${SIMU_SRC})

#set(CGP_SRC
#    "minicgp.h"
#    "minicgp.cpp"
#)
#PREPEND(CGP_SRC "src/cgp" ${CGP_SRC})

#set(S_MISC_SRC
#    "config/simuconfig.h"
#    "config/simuconfig.cpp"
#    "config/dependencies.h"
#    "config/dependencies.cpp"
#    "config/dependencies_autogenerated.cpp"
#)
#PREPEND(S_MISC_SRC "src" ${S_MISC_SRC})

#include_directories(MultiNEAT/src)
#add_subdirectory(MultiNEAT)
set(MultiNEAT_LIBS ${Boost_LIBRARIES} ${PYTHON_LIBRARIES})
set(MultiNEAT_SRC
    "Genome.h"
    "Genome.cpp"
    "Random.h"
    "Random.cpp"
    "NeuralNetwork.h"
    "NeuralNetwork.cpp"
    "Substrate.h"
    "Substrate.cpp"
    "Innovation.h"
    "Innovation.cpp"
    "Parameters.h"
    "Parameters.cpp"
)
PREPEND(MultiNEAT_SRC "MultiNEAT/src" ${MultiNEAT_SRC})
set(MultiNEAT_SRC ${MultiNEAT_SRC}
    "src/hyperneat/genotype.h" "src/hyperneat/genotype.cpp"
    "src/hyperneat/phenotype.h" "src/hyperneat/phenotype.cpp")
add_definitions(-DUSE_BOOST_RANDOM)

#set(MultiNEAT_SRC
#    "genome.h"
#    "genome.cpp"
#    "genes.h"
#    "config.h"
#    "config.cpp"
#)
#PREPEND(MultiNEAT_SRC "src/multineat_copy" ${MultiNEAT_SRC})

add_library(SIMU_OBJS OBJECT ${MultiNEAT_SRC} ${GNTP_SRC} ${SIMU_SRC})
# ${CGP_SRC} ${S_MISC_SRC})

include_directories(box2d/include)
add_subdirectory(box2d)


set(SIMU_LIBS box2d)

#include_directories(cnl/include)
#add_subdirectory(cnl)

################################################################################
## Target (simulation)
################################################################################
add_executable(
  simulator
  $<TARGET_OBJECTS:SIMU_OBJS>
  "src/simulator.cpp")
target_link_libraries(simulator ${SIMU_LIBS} ${APOGeT_LIBRARIES})

################################################################################
## Target (evaluation)
################################################################################
add_executable(
  evaluator
  $<TARGET_OBJECTS:SIMU_OBJS>
  "src/evaluator.cpp")
target_link_libraries(evaluator ${SIMU_LIBS} ${APOGeT_LIBRARIES})

################################################################################
## Target (timelines explorer)
################################################################################
#find_package(OpenMP)
#if (OPENMP_FOUND)
#    message("> OpenMP Found.")
#    message("  > OpenMP flags are " ${OpenMP_CXX_LIBRARIES})
#  add_executable(
#    timelines
#    $<TARGET_OBJECTS:SIMU_OBJS>
#    "src/genotype/genepool.cpp"
#    "src/timelines.cpp")
#  target_link_libraries(timelines ${APOGeT_LIBRARIES} OpenMP::OpenMP_CXX)
#endif()

#add_executable(
#    pve
#    $<TARGET_OBJECTS:SIMU_OBJS>
#    "src/naturalisation/common.h"
#    "src/naturalisation/common.cpp"
#    "src/naturalisation/pvesimulation.h"
#    "src/naturalisation/pvesimulation.cpp"
#    "src/naturalisation/pve.cpp")
#target_link_libraries(pve ${APOGeT_LIBRARIES})

#add_executable(
#    pvp
#    $<TARGET_OBJECTS:SIMU_OBJS>
#    "src/naturalisation/common.h"
#    "src/naturalisation/common.cpp"
#    "src/naturalisation/pvpsimulation.h"
#    "src/naturalisation/pvpsimulation.cpp"
#    "src/naturalisation/pvp.cpp")
#target_link_libraries(pvp ${APOGeT_LIBRARIES})

################################################################################
## Targets (other)
################################################################################

#option(AUTO_CALIBRATION_TOOL "Whether or not to build the (slighlty) automatic calibration tool" OFF)
#message("> Building automatic calibration tool: " ${AUTO_CALIBRATION_TOOL})
#if (AUTO_CALIBRATION_TOOL)
#  add_executable(auto-calibrator
#                 $<TARGET_OBJECTS:SIMU_OBJS>
#                 "src/misc/autocalibrator.cpp")
#  target_link_libraries(auto-calibrator ${APOGeT_LIBRARIES})
#endif()

#option(ANALYZER_TOOL "Whether or not to build the analyzer tool" OFF)
#message("> Building analyzer tool: " ${ANALYZER_TOOL})
#if (ANALYZER_TOOL)
#  add_executable(analyzer $<TARGET_OBJECTS:SIMU_OBJS> "src/misc/analyzer.cpp")
#  target_link_libraries(analyzer ${APOGeT_LIBRARIES})
#endif()

#option(SAVE_EQUAL_ASSERTER "Whether or not to build the tool for save equality assertion" OFF)
#if (SAVE_EQUAL_ASSERTER)
#  add_executable(save-equal-assert
#                 $<TARGET_OBJECTS:SIMU_OBJS>
#                 "src/misc/saveequalasserter.cpp")
#  target_link_libraries(save-equal-assert ${APOGeT_LIBRARIES})
#endif()

#option(BUILD_TESTS "Whether or not to build test tools" OFF)
#if (BUILD_TESTS)
#  add_executable(test-cgp
#                 $<TARGET_OBJECTS:SIMU_OBJS>
#                 "src/cgp/minicgp_test.cpp")
#  target_link_libraries(test-cgp ${APOGeT_LIBRARIES})
#endif()

if (NOT CLUSTER_BUILD)
################################################################################
## Sources files (visualizer)
################################################################################

    set(VISU_SRC
        "critter.h"
        "critter.cpp"
        "foodlet.h"
        "foodlet.cpp"
        "environment.h"
        "environment.cpp"
        "graphicsimulation.h"
        "graphicsimulation.cpp"
        "config.h"
        "config.cpp"

        "b2debugdrawer.h"
        "b2debugdrawer.cpp"
    )
    PREPEND(VISU_SRC "src/visu" ${VISU_SRC})

    set(GUI_SRC
        "mainview.h"
        "mainview.cpp"
        "geneticmanipulator.h"
        "geneticmanipulator.cpp"
        "statsview.h"
        "statsview.cpp"
        "joystick.h"
        "joystick.cpp"
    )

    PREPEND(GUI_SRC "src/gui" ${GUI_SRC})

    set(GUI_MISC_SRC
        "joystick/joystick.hh"
        "joystick/joystick.cc"

        "qt-collapsible-section/Section.h"
        "qt-collapsible-section/Section.cpp"
    )

    add_library(VISU_OBJS OBJECT ${VISU_SRC} ${GUI_SRC} ${GUI_MISC_SRC})
    target_include_directories(VISU_OBJS PRIVATE $<TARGET_PROPERTY:Qt5::Widgets,INTERFACE_INCLUDE_DIRECTORIES>)
    target_compile_definitions(VISU_OBJS PRIVATE $<TARGET_PROPERTY:Qt5::Widgets,INTERFACE_COMPILE_DEFINITIONS>)
    set_property(TARGET VISU_OBJS PROPERTY POSITION_INDEPENDENT_CODE ON)
    set_property(TARGET VISU_OBJS PROPERTY AUTOMOC ON)


#################################################################################
### Target (visualizer)
#################################################################################

    add_executable(
      visualizer
      $<TARGET_OBJECTS:SIMU_OBJS>
      $<TARGET_OBJECTS:VISU_OBJS>
      "src/visualizer.cpp"
    )
    set_property(TARGET visualizer PROPERTY AUTOMOC ON)
    target_link_libraries(visualizer ${SIMU_LIBS}
                                     ${APOGeT_LIBRARIES} ${APOGeT_GUI_LIBRARIES}
                                     ${QT_LIBS} ${MultiNEAT_LIBS})


#################################################################################
### Target (visualizer)
#################################################################################

#    add_executable(
#      pviewer
#      $<TARGET_OBJECTS:SIMU_OBJS>
#      "src/phylogenyviewer.cpp"
#    )
#    set_property(TARGET pviewer PROPERTY AUTOMOC ON)
#    target_link_libraries(pviewer ${QT_LIBS} ${APOGeT_LIBRARIES}
#                                             ${APOGeT_GUI_LIBRARIES})


#################################################################################
### Targets (Test)
#################################################################################
#    if (BUILD_TESTS)
#      add_executable(test-cgp-blindwatchmaker
#                     $<TARGET_OBJECTS:SIMU_OBJS>
#                     "src/cgp/minicgp_blindwatchmaker.cpp")
#      set_property(TARGET test-cgp-blindwatchmaker PROPERTY AUTOMOC ON)
#      target_link_libraries(test-cgp-blindwatchmaker ${QT_LIBS}
#                                                     ${APOGeT_LIBRARIES}
#                                                     ${APOGeT_GUI_LIBRARIES})

#    endif()
endif()


#################################################################################
### Additional flags
#################################################################################


#message("")

#option(CLUSTER_BUILD "Whether or not building on a cluster (i-e no gui and local linkage)" ON)
#message("> Cluster building mode is " ${CLUSTER_BUILD})
#if(CLUSTER_BUILD)
#    add_definitions(-DCLUSTER_BUILD)
#endif()

option(WITH_DEBUG_INFO "Sets whether to maximize debug data collection" OFF)
message("> With debug info " ${WITH_DEBUG_INFO})
if(WITH_DEBUG_INFO)
    add_definitions(-DWITH_DEBUG_INFO)

    # Enable small memory error detector (fuse=gold fixes linker errors)
#    set(ASAN "-fsanitize=thread")
    set(ASAN "-fsanitize=address -fsanitize=undefined")
    string(APPEND CMAKE_CXX_FLAGS " -g ${ASAN} -fno-omit-frame-pointer")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        string(APPEND CMAKE_CXX_FLAGS " -fuse-ld=gold")
    endif()
endif()

#option(UPDATE_DEPENDENCIES "Whether or not to keep dependency data up-to-date
#                            (implies extra compilation time)" ON)
#message("> Auto updating dependencies " ${UPDATE_DEPENDENCIES})

#if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
#    option(DEBUG_COLLISIONS "Add CPU/RAM cost to view collision tests" OFF)
#    message("> Debugging collisions: " ${DEBUG_COLLISIONS})
#    if (DEBUG_COLLISIONS)
#        add_definitions(-DDEBUG_COLLISIONS)
#    endif()
#endif()

#message("> Build type is " ${CMAKE_BUILD_TYPE})
#message("> Compile flags are " ${CMAKE_CXX_FLAGS})
#message("")


####################################################################################################
## Export configuration
####################################################################################################

#set(DEPENDENCY_GENERATOR ${APOGeT_DIR}/generate_dependency_data.sh)
#set(DEPENDENCY_FILE "${CMAKE_CURRENT_BINARY_DIR}/reus.dependency")
#set(DEPENDENCY_DATA ${PROJECT_SOURCE_DIR}/src/config/dependencies_autogenerated.cpp)
#if (UPDATE_DEPENDENCIES)
#    add_custom_target(dependencies ALL DEPENDS ${DEPENDENCY_FILE} ${DEPENDENCY_DATA})
#    add_custom_command(
#        OUTPUT ${DEPENDENCY_FILE}
#        COMMAND ${DEPENDENCY_GENERATOR}
#            ${DEPENDENCY_FILE} ReusWorld ${CMAKE_BUILD_TYPE}
#        COMMENT "Generating dependency data"
#        DEPENDS always_check
#    )
#    add_custom_command(
#        OUTPUT ${DEPENDENCY_DATA}
#        COMMAND ${PROJECT_SOURCE_DIR}/scripts/format_dependencies_data.sh
#                ${DEPENDENCY_DATA} ${CMAKE_CURRENT_BINARY_DIR} ${APOGeT_DIR}
#        COMMENT "Formatting dependency data"
#        DEPENDS always_check
#    )
#    add_custom_command(OUTPUT always_check COMMAND cmake -E echo)
#endif()
